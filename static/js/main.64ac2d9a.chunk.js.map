{"version":3,"sources":["Components/Timeline/index.ts","Components/Timeline/Timeline.tsx","Components/Profile/index.ts","Components/Profile/Profile.tsx","Components/Footer/index.ts","Components/Footer/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Timeline","tile","className","title","timelines","map","timeline","idx","key","year","style","backgroundColor","bgColor","designation","projects","project","name","techStack","description","Profile","aboutMe","emailAddress","mobileNumber","avatarUrl","location","alt","src","href","Footer","App","PROFILE","tiles","profileDetails","Helmet","content","rel","Object","entries","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qqNAEeA,G,MCO2B,SAAAC,GAGxC,OACE,2BAASC,UAAU,sBAChBD,EAAKE,MAAQ,sBAAID,UAAU,cAAcD,EAAKE,OAAc,KAC7D,uBAAKD,UAAU,gBACZD,EAAKG,UAAUC,KAAI,SAACC,EAAeC,GAClC,MAAO,CACL,uBAAKL,UAAmB,IAARK,EAAY,oBAAsB,oBAAqBC,IAAG,oBAAeF,EAASG,MAASC,MAAO,CAAEC,gBAAiBV,EAAKW,UACxI,uBAAKV,UAAU,oBACf,sBAAIA,UAAU,eAAeI,EAASG,MACrCH,EAASO,YAAc,0BAAKP,EAASO,aAAoB,KAExDP,EAASQ,SAAST,KAAI,SAACU,GACrB,OAAQ,uBAAKb,UAAU,eAAeM,IAAG,uBAAkBO,EAAQC,OACjE,yBAAID,EAAQC,MACZ,yBAAID,EAAQE,WACZ,yBAAIF,EAAQG,0BCzBjBC,G,MCU0B,SAAC,GAAwE,IAAtEH,EAAqE,EAArEA,KAAMI,EAA+D,EAA/DA,QAASC,EAAsD,EAAtDA,aAAcC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAC9F,OACI,2BAAStB,UAAU,qBACf,uBAAKA,UAAU,SAASuB,IAAKT,EAAMb,MAAOa,EAAMU,IAAKH,IACrD,0BAAKP,GACL,0BAAKI,GACL,yBAAG,qBAAGO,KAAI,iBAAYN,IAAiBA,IACvC,yBAAG,qBAAGM,KAAI,cAASL,IAAiBA,IACpC,yBAAIE,GACJ,2BACI,wBAAMtB,UAAU,QAChB,wBAAMA,UAAU,QAChB,wBAAMA,UAAU,QAChB,wBAAMA,UAAU,QAChB,wBAAMA,UAAU,YCxBjB0B,G,MCCiB,WAC5B,OACI,2BAAS1B,UAAU,uB,OC4BZ2B,G,MAzBH,WAAO,IACT1B,EAAiF2B,EAAjF3B,MAAOa,EAA0Ec,EAA1Ed,KAAMI,EAAoEU,EAApEV,QAASC,EAA2DS,EAA3DT,aAAcC,EAA6CQ,EAA7CR,aAAcC,EAA+BO,EAA/BP,UAAWC,EAAoBM,EAApBN,SAAUO,EAAUD,EAAVC,MACzEC,EAAiB,CAAEhB,OAAMI,UAASC,eAAcC,eAAcC,YAAWC,YAE/E,OACE,yBAAKtB,UAAU,iBACb,kBAAC+B,EAAA,OAAD,KACI,0BACEjB,KAAK,cACLkB,QAAS/B,IAEX,0BAAMgC,IAAI,OAAOR,KAAMJ,IACvB,+BAAQpB,IAEZ,kBAAC,EAAY6B,GAEXI,OAAOC,QAAQN,GAAO1B,KAAI,mCAAEG,EAAF,KAAOuB,EAAP,YAAkB,kBAAC,EAAD,eAAUvB,IAAG,eAAUA,IAAWuB,OAGhF,kBAAC,EAAD,SCfcO,QACW,cAA7BC,OAAOf,SAASgB,UAEe,UAA7BD,OAAOf,SAASgB,UAEhBD,OAAOf,SAASgB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.64ac2d9a.chunk.js","sourcesContent":["import { Timeline } from \"./Timeline\";\n\nexport default Timeline;\n","import * as React from \"react\";\nimport \"./_Timeline.scss\";\n\ninterface IProps {\n  title: string\n  bgColor: string\n  timelines: Array<{ year: number; designation: string, projects: Array<{ name: string, techStack: string, description: string }> }>;\n}\n\nexport const Timeline: React.FC<IProps> = tile => {\n  // var randomColor = Math.floor(Math.random()*16777215).toString(16); // style={{ backgroundColor: `#${randomColor}` }}\n\n  return (\n    <section className=\"tile tile-timeline\">\n      {tile.title ? <h2 className=\"tile-title\">{tile.title}</h2> : null}\n      <div className=\"tile-content\">\n        {tile.timelines.map((timeline: any, idx: number) => {\n          return [\n            <div className={idx === 0 ? 'tile-card card-01' : 'tile-card card-02'} key={`tile-card-${timeline.year}`}  style={{ backgroundColor: tile.bgColor }}>\n              <div className=\"empty-container\"></div>\n              <h3 className=\"card-header\">{timeline.year}</h3>\n              {timeline.designation ? <h4>{timeline.designation}</h4> : null}\n              {\n                timeline.projects.map((project: any) => {\n                  return (<div className=\"card-project\" key={`card-project-${project.name}`}>\n                    <p>{project.name}</p>\n                    <i>{project.techStack}</i>\n                    <p>{project.description}</p>\n                  </div>)\n                })\n              }\n            </div>\n          ];\n        })}\n      </div>\n    </section>\n  );\n};\n","import { Profile } from \"./Profile\";\n\nexport default Profile;\n","import * as React from 'react'\nimport './_Profile.scss'\n\ninterface IProps {\n    name: string\n    aboutMe: string\n    avatarUrl: string\n    emailAddress: string\n    mobileNumber: string\n    location: string\n}\n\nexport const Profile: React.FC<IProps> = ({ name, aboutMe, emailAddress, mobileNumber, avatarUrl, location }) => {\n    return (\n        <section className=\"tile tile-profile\">\n            <img className=\"avatar\" alt={name} title={name} src={avatarUrl} />\n            <h1>{name}</h1>\n            <h4>{aboutMe}</h4>\n            <p><a href={`mailto:${emailAddress}`}>{emailAddress}</a></p>\n            <p><a href={`tel:${mobileNumber}`}>{mobileNumber}</a></p>\n            <p>{location}</p>\n            <div>\n                <span className=\"dot\"></span>\n                <span className=\"dot\"></span>\n                <span className=\"dot\"></span>\n                <span className=\"dot\"></span>\n                <span className=\"dot\"></span>\n            </div>\n        </section>\n    );\n};\n","import { Footer } from \"./Footer\";\n\nexport default Footer;\n","import * as React from 'react'\nimport './_Footer.scss';\n\nexport const Footer: React.FC = () => {\n    return (\n        <section className=\"tile tile-footer\">\n            \n        </section>\n    );\n};\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport Timeline from './Components/Timeline';\nimport Profile from './Components/Profile';\nimport Footer from './Components/Footer';\nimport PROFILE from './data/gsaini-profile.json'\nimport \"./styles/app.scss\";\n\nconst App = () => {\n  const { title, name, aboutMe, emailAddress, mobileNumber, avatarUrl, location, tiles } = PROFILE;\n  const profileDetails = { name, aboutMe, emailAddress, mobileNumber, avatarUrl, location };\n\n  return (\n    <div className=\"app-container\">\n      <Helmet>\n          <meta\n            name=\"description\"\n            content={title}\n          />\n          <link rel=\"icon\" href={avatarUrl}/>\n          <title>{title}</title>\n      </Helmet>\n      <Profile {...profileDetails} />\n      {\n        Object.entries(tiles).map(([key, tiles]) => <Timeline key={`tile-${key}`} {...tiles}/>)\n      }\n\n      <Footer />\n    </div>\n\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}