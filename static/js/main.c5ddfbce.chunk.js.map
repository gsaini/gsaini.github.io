{"version":3,"sources":["Components/Timeline/index.ts","Components/Timeline/Timeline.tsx","Components/Profile/index.ts","Components/Profile/Profile.tsx","Components/Skills/index.ts","Components/Skills/Skills.tsx","Components/Education/index.ts","Components/Education/Education.tsx","Components/Footer/index.ts","Components/Footer/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Timeline","tile","className","title","timelines","map","timeline","idx","key","year","designation","projects","project","name","techStack","dangerouslySetInnerHTML","__html","description","Profile","company","aboutMe","emailAddress","mobileNumber","avatarUrl","location","alt","src","href","rel","target","Skills","skills","skill","Education","educations","iconCls","institute","stream","Footer","date","Date","getFullYear","App","PROFILE","tiles","profileDetails","Helmet","content","Object","entries","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5ddfbce.chunk.js","sourcesContent":["import { Timeline } from \"./Timeline\";\n\nexport default Timeline;\n","import * as React from \"react\";\nimport \"./_Timeline.scss\";\n\ninterface IProps {\n  title: string\n  bgColor: string\n  timelines: Array<{ year: number; designation: string, projects: Array<{ name: string, techStack: string, description: string }> }>;\n}\n\nexport const Timeline: React.FC<IProps> = tile => {\n  // var randomColor = Math.floor(Math.random()*16777215).toString(16); // style={{ backgroundColor: `#${randomColor}` }}\n\n  return (\n    <section className=\"tile tile-timeline\">\n      {tile.title ? <h3 className=\"tile-title\">{tile.title}</h3> : null}\n      <div className=\"tile-content\">\n        {tile.timelines.map((timeline: any, idx: number) => {\n          return [\n            <div className={idx === 0 ? 'tile-card card-01' : 'tile-card card-02'} key={`tile-card-${timeline.year}`}>\n              <div className=\"empty-container\"></div>\n              <h3 className=\"card-header\">{timeline.year}</h3>\n              {timeline.designation ? <h4>{timeline.designation}</h4> : null}\n              {\n                timeline.projects.map((project: any) => {\n                  return (<div className=\"card-project\" key={`card-project-${project.name}`}>\n                    <p>{project.name}</p>\n                    <i>{project.techStack}</i>\n                    <div dangerouslySetInnerHTML={ { __html: project.description } }></div>\n                  </div>)\n                })\n              }\n            </div>\n          ];\n        })}\n      </div>\n    </section>\n  );\n};\n","import { Profile } from \"./Profile\";\n\nexport default Profile;\n","import * as React from 'react'\nimport './_Profile.scss'\n\ninterface IProps {\n    name: string\n    company: string\n    designation: string\n    aboutMe: string\n    avatarUrl: string\n    emailAddress: string\n    mobileNumber: string\n    location: string\n}\n\nexport const Profile: React.FC<IProps> = ({ name, designation, company, aboutMe, emailAddress, mobileNumber, avatarUrl, location }) => {\n    return (\n        <section className=\"tile tile-profile\">\n            <img className=\"avatar\" alt={name} title={name} src={avatarUrl} />\n            <h1>{name}</h1>\n            <i>{designation} | {company}</i>\n            <h4 dangerouslySetInnerHTML={{ __html: aboutMe }}></h4>\n            <p><a href={`mailto:${emailAddress}`}>{emailAddress}</a></p>\n            <p><a href={`tel:${mobileNumber}`}>{mobileNumber}</a></p>\n            <p>{location}</p>\n            <div className=\"site-links\">\n                <a rel=\"noopener noreferrer\" href=\"https://github.com/gsaini\" target=\"_blank\"><i className=\"fab fa-github\"></i></a>\n                <a rel=\"noopener noreferrer\" href=\"https://twitter.com/saini_gopal\" target=\"_blank\"><i className=\"fab fa-twitter-square\"></i></a>\n                <a rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/gsaini01/\" target=\"_blank\"><i className=\"fab fa-linkedin\"></i></a>\n                <a rel=\"noopener noreferrer\" href=\"https://www.facebook.com/gops.saini\" target=\"_blank\"><i className=\"fab fa-facebook\"></i></a>\n                <a rel=\"noopener noreferrer\" href=\"https://www.instagram.com/gsaini__/\" target=\"_blank\"><i className=\"fab fa-instagram\"></i></a>\n            </div>\n        </section>\n    );\n};\n","import { Skills } from \"./Skills\";\n\nexport default Skills;","import * as React from 'react';\nimport './_Skills.scss';\n\ninterface IProps {\n    skills: Array<string>\n}\n\nexport const Skills: React.FC<IProps> = ({ skills }) => {\n    return (\n        <section className=\"tile tile-skills\">\n            <h3>Skills & Expertise</h3>\n            <div className=\"tags\">\n                {\n                    skills.map((skill, idx) => {\n                        return <div key={`skill-${idx}`}>{skill}</div>\n                    })\n                }\n            </div>\n        </section>\n    );\n};\n","import { Education } from \"./Education\";\n\nexport default Education;\n","import * as React from 'react'\nimport './_Education.scss'\n\ninterface EducationState {\n    iconCls: string\n    year: string\n    institute: string\n    stream: string\n}\n\ninterface IProps {\n    educations: Array<EducationState>\n}\n\nexport const Education: React.FC<IProps> = ({ educations }) => {\n    return (\n        <section className=\"tile tile-education\">\n            <div className=\"tile-content\">\n                {\n                    educations.map(({ iconCls, year, institute, stream }) => {\n                        return (\n                            <div className=\"tile-card\" key={`tile-card-${year}-${stream}`}>\n                                <i className={iconCls}></i>\n                                <div className=\"card-education\">\n                                    <h3>{institute}</h3>\n                                    <p>{stream}</p>\n                                    <p>{year}</p>\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        </section>\n    );\n};\n","import { Footer } from \"./Footer\";\n\nexport default Footer;\n","import * as React from 'react'\nimport './_Footer.scss';\n\nexport const Footer: React.FC = () => {\n    const date = new Date();\n    return (\n        <section className=\"tile tile-footer\">\n            <div>\n                Copyright Â© 2009 - { date.getFullYear() }, All rights reserved.\n            </div>\n        </section>\n    );\n};\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport Timeline from './Components/Timeline';\nimport Profile from './Components/Profile';\nimport Skills from './Components/Skills';\nimport Education from './Components/Education';\nimport Footer from './Components/Footer';\nimport PROFILE from './data/profile.json'\nimport \"./styles/app.scss\";\n\nconst App = () => {\n  const { title, company, designation, name, aboutMe, emailAddress, mobileNumber, avatarUrl, location, tiles, educations, skills } = PROFILE;\n  const profileDetails = { name, company, designation, aboutMe, emailAddress, mobileNumber, avatarUrl, location };\n\n  return (\n    <div className=\"app-container\">\n      <Helmet>\n        <meta\n          name=\"description\"\n          content={title}\n        />\n        <link rel=\"icon\" href={avatarUrl} />\n        <title>{title}</title>\n      </Helmet>\n      <Profile {...profileDetails} />\n      {\n        Object.entries(tiles).map(([key, tiles]) => <Timeline key={`tile-${key}`} {...tiles} />)\n      }\n      <Skills skills={skills} />\n      <Education {...{ educations: educations }} />\n      <Footer />\n    </div>\n\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}